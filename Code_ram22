import pandas as pd

def nettoyer_variables_objet(df, seuil_na=0.95, seuil_mode=0.95, max_cardinalite=50):
    # S√©lectionner toutes les colonnes de type 'object'
    colonnes_objet = df.select_dtypes(include='object').columns
    colonnes_a_supprimer = []

    # Parcourir chaque colonne object
    for col in colonnes_objet:
        serie = df[col]
        n_unique = serie.nunique(dropna=True)  # Nombre de valeurs distinctes
        taux_na = serie.isna().mean()  # Pourcentage de valeurs manquantes
        # Pourcentage de la valeur la plus fr√©quente (si colonne non vide)
        taux_valeur_mode = serie.value_counts(normalize=True, dropna=True).iloc[0] if n_unique > 0 else 1

        # === R√®gles de suppression ===
        if n_unique <= 1:
            # Colonne inutile : m√™me valeur partout
            colonnes_a_supprimer.append(col)
        elif taux_na >= seuil_na:
            # Trop de valeurs manquantes
            colonnes_a_supprimer.append(col)
        elif taux_valeur_mode >= seuil_mode:
            # Une seule modalit√© ultra dominante (peu discriminante)
            colonnes_a_supprimer.append(col)
        elif 'dt' in col.lower() or 'date' in col.lower():
            # Colonne de type date (√† exclure ici)
            colonnes_a_supprimer.append(col)
        elif any(x in col.lower() for x in ['nom', 'ref', 'client', 'adresse', 'geoplan', 'rue', 'cuser', 'projet']):
            # Colonnes contenant des identifiants ou des libell√©s personnels
            colonnes_a_supprimer.append(col)
        elif n_unique > max_cardinalite:
            # Trop de modalit√©s diff√©rentes (ex. variables quasi uniques)
            colonnes_a_supprimer.append(col)

    # Affiche un r√©sum√©
    print(f"üîç Colonnes supprim√©es : {len(colonnes_a_supprimer)} / {len(colonnes_objet)}")

    # Retourne le DataFrame nettoy√© et la liste des colonnes supprim√©es
    return df.drop(columns=colonnes_a_supprimer), colonnes_a_supprimer
