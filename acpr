from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline

# Ã‰tape 1 : dÃ©finir les Ã©tapes du pipeline
over = SMOTE(sampling_strategy=0.3, random_state=42)
under = RandomUnderSampler(sampling_strategy=0.8, random_state=42)

resample_pipeline = Pipeline([
    ('smote', over),
    ('under', under)
])

# Appliquer le resampling uniquement sur le jeu d'entraÃ®nement final
X_train_bal, y_train_bal = resample_pipeline.fit_resample(X_train_final, y_train_final)

print(f"Nouvelle distribution :\n{pd.Series(y_train_bal).value_counts()}")

-------------------
from sklearn.ensemble import RandomForestClassifier

model_balanced = RandomForestClassifier(
    n_estimators=100,
    class_weight=None,  # plus besoin de class_weight aprÃ¨s resampling
    random_state=42,
    n_jobs=-1
)

model_balanced.fit(X_train_bal, y_train_bal)

----------------

from sklearn.metrics import classification_report, f1_score, roc_auc_score, confusion_matrix

y_test_proba_bal = model_balanced.predict_proba(X_test_final)[:, 1]

# Par dÃ©faut, RandomForest utilise un seuil de 0.5. On va le faire varier.

--------------

import numpy as np

best_threshold = 0.5
best_f1 = 0

thresholds = np.linspace(0.01, 1.0, 100)
f1_scores = []

for threshold in thresholds:
    y_test_pred_thresh = (y_test_proba_bal >= threshold).astype(int)
    f1 = f1_score(y_test_final, y_test_pred_thresh)
    f1_scores.append(f1)
    
    if f1 > best_f1:
        best_f1 = f1
        best_threshold = threshold

print(f"âœ… Meilleur seuil trouvÃ© : {best_threshold:.4f}")
print(f"âœ… F1-score optimal : {best_f1:.4f}")

-------------

y_test_pred_final = (y_test_proba_bal >= best_threshold).astype(int)

print("\nðŸ“Š Ã‰valuation finale sur le TEST :")
print(classification_report(y_test_final, y_test_pred_final, digits=4))
print("Confusion Matrix :")
print(confusion_matrix(y_test_final, y_test_pred_final))

auc_final = roc_auc_score(y_test_final, y_test_proba_bal)
print(f"AUC : {auc_final:.4f}")
print(f"F1-score (seuil {best_threshold:.2f}) : {f1_score(y_test_final, y_test_pred_final):.4f}")
