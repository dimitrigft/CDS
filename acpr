from sklearn.model_selection import train_test_split
import numpy as np

df_all_trim_final["CONTRAT"] = df_all_trim_final["CONTRAT"].astype(str)
df_all_trim_final["SINISTRE_BINARY"] = df_all_trim_final["SINISTRE"].astype(int)

# Split stratifiÃ© au niveau contrat
contracts_df = df_all_trim_final.groupby("CONTRAT").agg({"SINISTRE_BINARY": "max"}).reset_index()

train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"],
    test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"],
    random_state=42
)

df_train_val = df_all_trim_final[df_all_trim_final["CONTRAT"].isin(train_val_ids)].copy()
df_test = df_all_trim_final[df_all_trim_final["CONTRAT"].isin(test_ids)].copy()

---------------

from sklearn.model_selection import StratifiedGroupKFold

X = df_train_val.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
y = df_train_val["SINISTRE_BINARY"]
groups = df_train_val["CONTRAT"]

sgkf = StratifiedGroupKFold(n_splits=4, shuffle=True, random_state=42)
folds = list(sgkf.split(X, y, groups))

# EntraÃ®nement sur folds 0 Ã  2, validation sur fold 3
train_val_idx = np.concatenate([val_idx for _, val_idx in folds[:3]])
val_idx = folds[3][1]

-------------

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score, roc_auc_score, classification_report, confusion_matrix

results_val = []
models = []

for fold, (train_idx, val_idx_fold) in enumerate(folds):
    print(f"\nðŸ“˜ Fold {fold + 1}")
    
    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx_fold]
    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx_fold]

    model = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_val)
    y_proba = model.predict_proba(X_val)[:, 1]

    f1 = f1_score(y_val, y_pred)
    auc = roc_auc_score(y_val, y_proba)

    print("Confusion Matrix :")
    print(confusion_matrix(y_val, y_pred))
    print("\nClassification Report :")
    print(classification_report(y_val, y_pred, digits=4))
    print(f"AUC : {auc:.4f} | F1-score : {f1:.4f}")

    results_val.append({
        'fold': fold + 1,
        'f1': f1,
        'auc': auc
    })
    models.append(model)

------------

def select_top_features_by_importance(model, X, threshold=0.005):
    importances = model.feature_importances_
    return X.columns[importances > threshold].tolist()

seuils = [0.0005, 0.001, 0.002, 0.005, 0.01]
resultats_seuils = []

for seuil in seuils:
    model = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1)
    model.fit(X.iloc[train_val_idx], y.iloc[train_val_idx])

    features_sel = select_top_features_by_importance(model, X, threshold=seuil)
    
    X_train_sel = X.iloc[train_val_idx][features_sel]
    X_val_sel = X.iloc[val_idx][features_sel]
    y_train_sel = y.iloc[train_val_idx]
    y_val_sel = y.iloc[val_idx]

    model_sel = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1)
    model_sel.fit(X_train_sel, y_train_sel)

    y_pred_val = model_sel.predict(X_val_sel)
    y_proba_val = model_sel.predict_proba(X_val_sel)[:, 1]

    f1 = f1_score(y_val_sel, y_pred_val)
    auc = roc_auc_score(y_val_sel, y_proba_val)

    print(f"\nSeuil {seuil} | {len(features_sel)} variables => AUC: {auc:.4f}, F1-score: {f1:.4f}")

    resultats_seuils.append({
        "seuil": seuil,
        "n_features": len(features_sel),
        "auc": auc,
        "f1": f1,
        "features": features_sel
    })

# Choix du meilleur seuil
resultats_df = pd.DataFrame(resultats_seuils)
best_row = resultats_df.sort_values(by="f1", ascending=False).iloc[0]
best_features = best_row["features"]

print("\nâœ… Meilleur seuil :", best_row["seuil"])
print("Variables sÃ©lectionnÃ©es :", len(best_features))

--------------

X_train_final = X.iloc[train_val_idx][best_features]
y_train_final = y.iloc[train_val_idx]

X_test = df_test.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
y_test = df_test["SINISTRE_BINARY"]
X_test_final = X_test[best_features]

model_final = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1)
model_final.fit(X_train_final, y_train_final)

y_pred_test = model_final.predict(X_test_final)
y_proba_test = model_final.predict_proba(X_test_final)[:, 1]

print("\nðŸ“Š Ã‰valuation finale sur le TEST :")
print(classification_report(y_test, y_pred_test, digits=4))
print(f"AUC : {roc_auc_score(y_test, y_proba_test):.4f}")
print(f"F1-score : {f1_score(y_test, y_pred_test):.4f}")
