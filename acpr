import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, StratifiedGroupKFold
from sklearn.metrics import f1_score, roc_auc_score, classification_report, confusion_matrix
from xgboost import XGBClassifier
from imblearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler

# ------------------- Ã‰tape 1 : prÃ©paration des donnÃ©es -------------------

df = df_all_trim_final.copy()
df["CONTRAT"] = df["CONTRAT"].astype(str)
df["SINISTRE_BINARY"] = df["SINISTRE"].astype(int)

# Split par contrat
contracts_df = df.groupby("CONTRAT").agg({"SINISTRE_BINARY": "max"}).reset_index()

train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"],
    test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"],
    random_state=42
)

df_train_val = df[df["CONTRAT"].isin(train_val_ids)]
df_test = df[df["CONTRAT"].isin(test_ids)]

# ------------------- Ã‰tape 2 : prÃ©paration X, y -------------------

# Suppression des colonnes non numÃ©riques
cols_to_drop = ["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"]
X = df_train_val.drop(columns=cols_to_drop)
y = df_train_val["SINISTRE_BINARY"]
groups = df_train_val["CONTRAT"]

# Conversion explicite en float32
X = X.apply(pd.to_numeric, errors='coerce').astype(np.float32)

# Test set
X_test = df_test.drop(columns=cols_to_drop).apply(pd.to_numeric, errors='coerce').astype(np.float32)
y_test = df_test["SINISTRE_BINARY"]

# ------------------- Ã‰tape 3 : split validation -------------------

sgkf = StratifiedGroupKFold(n_splits=4, shuffle=True, random_state=42)
folds = list(sgkf.split(X, y, groups))

train_val_idx = np.concatenate([val_idx for _, val_idx in folds[:3]])
val_idx = folds[3][1]

# ------------------- Ã‰tape 4 : sÃ©lection de variables -------------------

def select_top_features_by_importance(model, X, threshold=0.005):
    importances = model.feature_importances_
    return X.columns[importances > threshold].tolist()

seuils_importance = [0.0005, 0.001, 0.002, 0.005, 0.01]
resultats = []

for seuil in seuils_importance:
    # SÃ©lection de variables
    xgb_temp = XGBClassifier(use_label_encoder=False, eval_metric="logloss", random_state=42, n_jobs=-1)
    xgb_temp.fit(X.iloc[train_val_idx], y.iloc[train_val_idx])
    
    features = select_top_features_by_importance(xgb_temp, X, seuil)

    X_train = X.iloc[train_val_idx][features]
    y_train = y.iloc[train_val_idx]
    X_val = X.iloc[val_idx][features]
    y_val = y.iloc[val_idx]

    # Pipeline SMOTE + Under + XGBoost
    pipe = Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("under", RandomUnderSampler(random_state=42)),
        ("clf", XGBClassifier(use_label_encoder=False, eval_metric="logloss", random_state=42, n_jobs=-1))
    ])
    pipe.fit(X_train, y_train)

    y_val_proba = pipe.predict_proba(X_val)[:, 1]

    best_thresh = 0.5
    best_f1 = 0
    for t in np.arange(0.01, 1.0, 0.01):
        y_pred = (y_val_proba >= t).astype(int)
        f1 = f1_score(y_val, y_pred)
        if f1 > best_f1:
            best_f1 = f1
            best_thresh = t

    resultats.append({
        "seuil_var": seuil,
        "nb_features": len(features),
        "best_threshold": best_thresh,
        "best_f1": best_f1,
        "features": features
    })

# ------------------- Ã‰tape 5 : entraÃ®nement final -------------------

results_df = pd.DataFrame(resultats)
best_row = results_df.sort_values(by="best_f1", ascending=False).iloc[0]
final_features = best_row["features"]

X_train_final = X.iloc[train_val_idx][final_features]
y_train_final = y.iloc[train_val_idx]

X_test_final = X_test[final_features].astype(np.float32)
y_test_final = y_test

final_model = Pipeline([
    ("smote", SMOTE(random_state=42)),
    ("under", RandomUnderSampler(random_state=42)),
    ("clf", XGBClassifier(use_label_encoder=False, eval_metric="logloss", random_state=42, n_jobs=-1))
])
final_model.fit(X_train_final, y_train_final)

y_test_proba = final_model.predict_proba(X_test_final)[:, 1]
y_test_pred = (y_test_proba >= best_row["best_threshold"]).astype(int)

print("\nðŸ“Š Ã‰valuation finale sur le TEST :")
print("Confusion matrix :")
print(confusion_matrix(y_test_final, y_test_pred))
print("\nClassification report :")
print(classification_report(y_test_final, y_test_pred, digits=4))
print(f"AUC : {roc_auc_score(y_test_final, y_test_proba):.4f}")
print(f"F1-score : {f1_score(y_test_final, y_test_pred):.4f}")
