from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import randint
from imblearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier

# 1. Pipeline avec SMOTE, undersampling et RandomForest
pipe = Pipeline([
    ("smote", SMOTE(random_state=42)),
    ("under", RandomUnderSampler(random_state=42)),
    ("clf", RandomForestClassifier(random_state=42, class_weight="balanced"))
])

# 2. Espace de recherche rÃ©duit (pour rapiditÃ©)
param_distributions = {
    "clf__n_estimators": randint(50, 150),
    "clf__max_depth": randint(5, 30),
    "clf__min_samples_split": randint(2, 10),
    "clf__min_samples_leaf": randint(1, 10),
    "clf__max_features": ["sqrt", "log2", None]
}

# 3. RandomizedSearchCV (peu dâ€™itÃ©rations pour aller vite)
search = RandomizedSearchCV(
    pipe,
    param_distributions=param_distributions,
    n_iter=20,                     # nombre d'itÃ©rations (plus = + prÃ©cis mais + long)
    scoring="f1",                 # on optimise le F1 score
    cv=3,                         # 3-fold CV pour rapiditÃ©
    verbose=1,
    random_state=42,
    n_jobs=-1
)

# 4. EntraÃ®nement sur les donnÃ©es finales avec les meilleures variables
search.fit(X_train_final, y_train_final)

# 5. Meilleurs hyperparamÃ¨tres
print("\n Meilleurs paramÃ¨tres trouvÃ©s :")
print(search.best_params_)

# 6. Ã‰valuation finale
best_model = search.best_estimator_

y_test_proba = best_model.predict_proba(X_test_final)[:, 1]

# Optimisation du seuil comme avant
best_threshold = 0.5
best_f1 = 0
for t in np.arange(0.01, 1.0, 0.01):
    y_test_pred_temp = (y_test_proba >= t).astype(int)
    f1 = f1_score(y_test_final, y_test_pred_temp)
    if f1 > best_f1:
        best_f1 = f1
        best_threshold = t

# PrÃ©dictions finales
y_test_pred_final = (y_test_proba >= best_threshold).astype(int)

# RÃ©sultats
print("\nðŸ§ª Ã‰valuation finale (avec seuil optimisÃ©) :")
print(f"Meilleur seuil : {best_threshold:.2f}")
print(confusion_matrix(y_test_final, y_test_pred_final))
print(classification_report(y_test_final, y_test_pred_final, digits=4))
print(f"AUC : {roc_auc_score(y_test_final, y_test_proba):.4f}")
print(f"F1-score : {f1_score(y_test_final, y_test_pred_final):.4f}")
