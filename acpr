df_all_trim_final["CONTRAT"] = df_all_trim_final["CONTRAT"].astype(str)
df_all_trim_final["SINISTRE_BINARY"] = df_all_trim_final["SINISTRE"].astype(int)



from sklearn.model_selection import train_test_split

# 1. Agréger au niveau contrat
contracts_df = df_all_trim_final.groupby("CONTRAT").agg({
    "SINISTRE_BINARY": "max"
}).reset_index()

# 2. Split stratifié par sinistre
train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"],
    test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"],
    random_state=42
)

# 3. Séparer les données complètes
df_train_val = df_all_trim_final[df_all_trim_final["CONTRAT"].isin(train_val_ids)]
df_test = df_all_trim_final[df_all_trim_final["CONTRAT"].isin(test_ids)]


from sklearn.model_selection import StratifiedGroupKFold

# 1. Préparer X, y, groups
X = df_train_val.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
y = df_train_val["SINISTRE_BINARY"]
groups = df_train_val["CONTRAT"]

# 2. Créer les folds
sgkf = StratifiedGroupKFold(n_splits=4, shuffle=True, random_state=42)
folds = []

for fold, (train_idx, val_idx) in enumerate(sgkf.split(X, y, groups=groups)):
    print(f"\nFold {fold + 1} :")
    print(f"  - Taille train : {len(train_idx)}")
    print(f"  - Taille val   : {len(val_idx)}")
    print(f"  - Prop. sinistres (val) : {y.iloc[val_idx].mean():.4f}")
    
    folds.append((train_idx, val_idx))


X_test = df_test.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
y_test = df_test["SINISTRE_BINARY"]
