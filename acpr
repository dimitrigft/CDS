from imblearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from sklearn.linear_model import LogisticRegression

# Pipeline de traitement avec SMOTE + undersampling + r√©gression logistique
pipeline = Pipeline([
    ("smote", SMOTE(random_state=42)),
    ("under", RandomUnderSampler(random_state=42)),
    ("clf", LogisticRegression(
        penalty='l2',
        solver='liblinear',
        class_weight=None,  # D√©sactiv√© ici, car on r√©√©quilibre en amont
        random_state=42
    ))
])

# Entra√Ænement
pipeline.fit(X, y)

# Pr√©dictions
y_pred = pipeline.predict(X_test)
y_proba = pipeline.predict_proba(X_test)[:, 1]

# √âvaluation
print("\nüìä R√©gression logistique avec SMOTE + undersampling :")
print("Confusion matrix :")
print(confusion_matrix(y_test, y_pred))
print("\nClassification report :")
print(classification_report(y_test, y_pred, digits=4))
print(f"AUC : {roc_auc_score(y_test, y_proba):.4f}")
print(f"F1-score : {f1_score(y_test, y_pred):.4f}")
