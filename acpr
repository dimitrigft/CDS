# Regression logistique simple

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, roc_auc_score, f1_score, confusion_matrix

# --- 1. Préparation des données ---
df = df_all_trim_final.copy()
df["CONTRAT"] = df["CONTRAT"].astype(str)
df["SINISTRE_BINARY"] = df["SINISTRE"].astype(int)

# Stratification par contrat
contracts_df = df.groupby("CONTRAT").agg({"SINISTRE_BINARY": "max"}).reset_index()
train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"], test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"], random_state=42
)

df_train_val = df[df["CONTRAT"].isin(train_val_ids)].copy()
df_test = df[df["CONTRAT"].isin(test_ids)].copy()

# --- 2. Variables explicatives ---
X = df_train_val.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X = X.loc[:, ~X.columns.duplicated()]  # Supprimer les colonnes dupliquées
X = X.astype(np.float32)
y = df_train_val["SINISTRE_BINARY"].astype(np.int32)

X_test = df_test.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X_test = X_test.loc[:, ~X_test.columns.duplicated()]
X_test = X_test.astype(np.float32)
y_test = df_test["SINISTRE_BINARY"].astype(np.int32)

# --- 3. Modèle de régression logistique naïve ---
model = LogisticRegression(
    penalty='l2',
    solver='liblinear',
    class_weight='balanced',  # pour compenser le déséquilibre des classes
    random_state=42
)

model.fit(X, y)

# --- 4. Évaluation sur le jeu de test ---
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

print("📊 Évaluation sur le TEST (Régression logistique naïve) :")
print("Confusion Matrix :")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report :")
print(classification_report(y_test, y_pred, digits=4))
print(f"AUC : {roc_auc_score(y_test, y_proba):.4f}")
print(f"F1-score : {f1_score(y_test, y_pred):.4f}")


# Regression logistique 

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, StratifiedGroupKFold
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, roc_auc_score, f1_score, confusion_matrix

# --- 1. Préparation des données ---
df = df_all_trim_final.copy()
df["CONTRAT"] = df["CONTRAT"].astype(str)
df["SINISTRE_BINARY"] = df["SINISTRE"].astype(int)

# Stratification par contrat
contracts_df = df.groupby("CONTRAT").agg({"SINISTRE_BINARY": "max"}).reset_index()

train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"], test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"], random_state=42
)

df_train_val = df[df["CONTRAT"].isin(train_val_ids)].copy()
df_test = df[df["CONTRAT"].isin(test_ids)].copy()

# --- 2. Variables explicatives ---
X = df_train_val.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X = X.loc[:, ~X.columns.duplicated()]
X = X.astype(np.float32)
y = df_train_val["SINISTRE_BINARY"].astype(np.int32)

X_test = df_test.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X_test = X_test.loc[:, ~X_test.columns.duplicated()]
X_test = X_test.astype(np.float32)
y_test = df_test["SINISTRE_BINARY"].astype(np.int32)

# --- 3. Modèle de régression logistique ---
model = LogisticRegression(
    penalty='l2',
    solver='liblinear',
    class_weight='balanced',  # pour compenser le déséquilibre
    random_state=42
)

model.fit(X, y)

# --- 4. Évaluation sur le jeu de test ---
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

print(" Évaluation sur le TEST (Régression logistique simple) :")
print("Confusion Matrix :")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report :")
print(classification_report(y_test, y_pred, digits=4))
print(f"AUC : {roc_auc_score(y_test, y_proba):.4f}")
print(f"F1-score : {f1_score(y_test, y_pred):.4f}")

# Random forest 

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, StratifiedGroupKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score, f1_score, confusion_matrix, roc_curve, auc
from imblearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
import matplotlib.pyplot as plt

# 1. Données
df = df_all_trim_final.copy()
df["CONTRAT"] = df["CONTRAT"].astype(str)
df["SINISTRE_BINARY"] = df["SINISTRE"].astype(int)

# 2. Split stratifié par contrat
contracts_df = df.groupby("CONTRAT").agg({"SINISTRE_BINARY": "max"}).reset_index()
train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"], test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"], random_state=42
)

df_train_val = df[df["CONTRAT"].isin(train_val_ids)].copy()
df_test = df[df["CONTRAT"].isin(test_ids)].copy()

# 3. Variables explicatives
X = df_train_val.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X = X.astype(np.float32)
X = X.loc[:, ~X.columns.duplicated()]
y = df_train_val["SINISTRE_BINARY"].astype(np.int32)
groups = df_train_val["CONTRAT"]

# 4. StratifiedGroupKFold
sgkf = StratifiedGroupKFold(n_splits=4, shuffle=True, random_state=42)
folds = list(sgkf.split(X, y, groups))
train_val_idx = np.concatenate([val_idx for _, val_idx in folds[:3]])
val_idx = folds[3][1]

# 5. Sélection de variables
def select_top_features_by_importance(model, X, threshold=0.005):
    importances = model.feature_importances_
    return X.columns[importances > threshold].tolist()

seuils_importance = [0.0005, 0.001, 0.002, 0.005, 0.01]
resultats = []

for seuil in seuils_importance:
    X_train_fold = X.iloc[train_val_idx]
    y_train_fold = y.iloc[train_val_idx]
    X_val_fold = X.iloc[val_idx]
    y_val_fold = y.iloc[val_idx]

    base_model = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1)
    base_model.fit(X_train_fold, y_train_fold)

    selected = select_top_features_by_importance(base_model, X_train_fold, seuil)

    X_train_sel = X_train_fold[selected].values.astype(np.float32)
    y_train_sel = y_train_fold.values.astype(np.int32)
    X_val_sel = X_val_fold[selected].values.astype(np.float32)
    y_val_sel = y_val_fold.values.astype(np.int32)

    pipe = Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("under", RandomUnderSampler(random_state=42)),
        ("clf", RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1))
    ])
    pipe.fit(X_train_sel, y_train_sel)
    y_val_proba = pipe.predict_proba(X_val_sel)[:, 1]

    best_thresh = 0.5
    best_f1 = 0
    for t in np.arange(0.01, 1.0, 0.01):
        y_pred = (y_val_proba >= t).astype(int)
        f1 = f1_score(y_val_sel, y_pred)
        if f1 > best_f1:
            best_f1 = f1
            best_thresh = t

    resultats.append({
        "seuil_var": seuil,
        "nb_features": len(selected),
        "best_threshold": best_thresh,
        "best_f1": best_f1,
        "features": selected
    })

# 6. Résultat optimal
results_df = pd.DataFrame(resultats)
best_row = results_df.sort_values(by="best_f1", ascending=False).iloc[0]

# 7. Entraînement final
X_train_final = X.iloc[train_val_idx][best_row["features"]].values.astype(np.float32)
y_train_final = y.iloc[train_val_idx].values.astype(np.int32)

X_test = df_test.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X_test = X_test.loc[:, ~X_test.columns.duplicated()]
X_test_final = X_test[best_row["features"]].values.astype(np.float32)
y_test_final = df_test["SINISTRE_BINARY"].values.astype(np.int32)

final_pipe = Pipeline([
    ("smote", SMOTE(random_state=42)),
    ("under", RandomUnderSampler(random_state=42)),
    ("clf", RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1))
])
final_pipe.fit(X_train_final, y_train_final)

# 8. Prédictions finales
y_test_proba = final_pipe.predict_proba(X_test_final)[:, 1]
y_test_pred = (y_test_proba >= best_row["best_threshold"]).astype(int)

# 9. Évaluation
print("\n Évaluation finale sur le TEST (Random Forest) :")
print("Confusion Matrix :")
print(confusion_matrix(y_test_final, y_test_pred))
print("\nClassification Report :")
print(classification_report(y_test_final, y_test_pred, digits=4))
print(f"AUC : {roc_auc_score(y_test_final, y_test_proba):.4f}")
print(f"F1-score : {f1_score(y_test_final, y_test_pred):.4f}")

# 10. Courbe ROC
fpr, tpr, thresholds = roc_curve(y_test_final, y_test_proba)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color="darkorange", lw=2, label=f"ROC curve (AUC = {roc_auc:.4f})")
plt.plot([0, 1], [0, 1], color="navy", lw=2, linestyle="--", label="Random Classifier")
plt.xlabel("Taux de faux positifs (FPR)")
plt.ylabel("Taux de vrais positifs (TPR)")
plt.title("Courbe ROC – Random Forest")
plt.legend(loc="lower right")
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()




# lightGBM

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, StratifiedGroupKFold
from sklearn.metrics import classification_report, roc_auc_score, f1_score, confusion_matrix, roc_curve, auc
from lightgbm import LGBMClassifier
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline
import matplotlib.pyplot as plt

# Étape 1 : Données
df = df_all_trim_final.copy()
df["CONTRAT"] = df["CONTRAT"].astype(str)
df["SINISTRE_BINARY"] = df["SINISTRE"].astype(int)

# Étape 2 : Split contrat
contracts_df = df.groupby("CONTRAT").agg({"SINISTRE_BINARY": "max"}).reset_index()
train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"],
    test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"],
    random_state=42
)

df_train_val = df[df["CONTRAT"].isin(train_val_ids)]
df_test = df[df["CONTRAT"].isin(test_ids)]

# Étape 3 : Définir X, y, groups
X = df_train_val.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X = X.loc[:, ~X.columns.duplicated()]  # Supprimer colonnes dupliquées
y = df_train_val["SINISTRE_BINARY"]
groups = df_train_val["CONTRAT"]

# Étape 4 : Cross-validation par contrat
sgkf = StratifiedGroupKFold(n_splits=4, shuffle=True, random_state=42)
folds = list(sgkf.split(X, y, groups=groups))
train_val_idx = np.concatenate([val_idx for _, val_idx in folds[:3]])
val_idx = folds[3][1]

# Étape 5 : Sélection des variables
def select_top_features_by_importance(model, X, threshold=0.005):
    importances = model.feature_importances_
    return X.columns[importances > threshold].tolist()

seuils_importance = [0.0005, 0.001, 0.002, 0.005, 0.01]
resultats = []

for seuil in seuils_importance:
    print(f"\n🔎 Seuil importance : {seuil}")
    model_lgbm = LGBMClassifier(random_state=42, n_jobs=-1)
    model_lgbm.fit(X.iloc[train_val_idx], y.iloc[train_val_idx])
    selected_features = select_top_features_by_importance(model_lgbm, X, seuil)

    X_train_sel = X.iloc[train_val_idx][selected_features]
    y_train_sel = y.iloc[train_val_idx]
    X_val_sel = X.iloc[val_idx][selected_features]
    y_val_sel = y.iloc[val_idx]

    pipe = Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("under", RandomUnderSampler(random_state=42)),
        ("clf", LGBMClassifier(random_state=42, n_jobs=-1))
    ])

    pipe.fit(X_train_sel, y_train_sel)
    y_val_proba = pipe.predict_proba(X_val_sel)[:, 1]

    best_f1 = 0
    best_thresh = 0.5
    for t in np.arange(0.01, 1.0, 0.01):
        y_val_pred = (y_val_proba >= t).astype(int)
        f1 = f1_score(y_val_sel, y_val_pred)
        if f1 > best_f1:
            best_f1 = f1
            best_thresh = t

    resultats.append({
        "seuil_var": seuil,
        "n_features": len(selected_features),
        "best_threshold": best_thresh,
        "best_f1": best_f1,
        "features": selected_features
    })

# Étape 6 : Sélection du meilleur seuil
results_df = pd.DataFrame(resultats)
best_row = results_df.sort_values(by="best_f1", ascending=False).iloc[0]

# Étape 7 : Réentraînement final
X_train_final = X.iloc[train_val_idx][best_row["features"]]
y_train_final = y.iloc[train_val_idx]

X_test = df_test.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X_test = X_test.loc[:, ~X_test.columns.duplicated()]
X_test_final = X_test[best_row["features"]]
y_test_final = df_test["SINISTRE_BINARY"]

final_pipeline = Pipeline([
    ("smote", SMOTE(random_state=42)),
    ("under", RandomUnderSampler(random_state=42)),
    ("clf", LGBMClassifier(random_state=42, n_jobs=-1))
])

final_pipeline.fit(X_train_final, y_train_final)

# Étape 8 : Prédictions et seuil optimal
y_test_proba = final_pipeline.predict_proba(X_test_final)[:, 1]
y_test_pred = (y_test_proba >= best_row["best_threshold"]).astype(int)

# Étape 9 : Évaluation
print("\n Évaluation finale – LightGBM :")
print("Confusion matrix :")
print(confusion_matrix(y_test_final, y_test_pred))
print("\nClassification report :")
print(classification_report(y_test_final, y_test_pred, digits=4))
print(f"AUC : {roc_auc_score(y_test_final, y_test_proba):.4f}")
print(f"F1-score : {f1_score(y_test_final, y_test_pred):.4f}")

# Étape 10 : Courbe ROC
fpr, tpr, thresholds = roc_curve(y_test_final, y_test_proba)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color="darkorange", lw=2, label=f"ROC curve (AUC = {roc_auc:.4f})")
plt.plot([0, 1], [0, 1], color="navy", lw=2, linestyle="--")
plt.xlabel("Taux de faux positifs (FPR)")
plt.ylabel("Taux de vrais positifs (TPR)")
plt.title("Courbe ROC – LightGBM")
plt.legend(loc="lower right")
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()


# catboost 

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, StratifiedGroupKFold
from sklearn.metrics import classification_report, roc_auc_score, f1_score, confusion_matrix
from catboost import CatBoostClassifier
from imblearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler

# Étape 1 : Préparation des données
df = df_all_trim_final.copy()
df["CONTRAT"] = df["CONTRAT"].astype(str)
df["SINISTRE_BINARY"] = df["SINISTRE"].astype(int)

# Split stratifié par contrat
contracts_df = df.groupby("CONTRAT").agg({"SINISTRE_BINARY": "max"}).reset_index()
train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"],
    test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"],
    random_state=42
)
df_train_val = df[df["CONTRAT"].isin(train_val_ids)]
df_test = df[df["CONTRAT"].isin(test_ids)]

# Variables
X = df_train_val.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X = X.loc[:, ~X.columns.duplicated()]
y = df_train_val["SINISTRE_BINARY"]
groups = df_train_val["CONTRAT"]

# CV Groupée
sgkf = StratifiedGroupKFold(n_splits=4, shuffle=True, random_state=42)
folds = list(sgkf.split(X, y, groups))
train_val_idx = np.concatenate([val_idx for _, val_idx in folds[:3]])
val_idx = folds[3][1]

# Fonction de sélection des variables
def select_top_features_by_importance(model, X, threshold=0.005):
    importances = model.get_feature_importance()
    return X.columns[np.array(importances) > threshold].tolist()

# Grid de seuils d’importance
seuils_importance = [0.0005, 0.001, 0.002, 0.005, 0.01]
resultats = []

for seuil in seuils_importance:
    print(f"\n🔍 Seuil d’importance : {seuil}")
    model_cb = CatBoostClassifier(verbose=0, random_state=42)
    model_cb.fit(X.iloc[train_val_idx], y.iloc[train_val_idx])
    selected_features = select_top_features_by_importance(model_cb, X, seuil)

    X_train_sel = X.iloc[train_val_idx][selected_features]
    y_train_sel = y.iloc[train_val_idx]
    X_val_sel = X.iloc[val_idx][selected_features]
    y_val_sel = y.iloc[val_idx]

    pipe = Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("under", RandomUnderSampler(random_state=42)),
        ("clf", CatBoostClassifier(verbose=0, random_state=42))
    ])

    pipe.fit(X_train_sel, y_train_sel)
    y_val_proba = pipe.predict_proba(X_val_sel)[:, 1]

    best_f1 = 0
    best_thresh = 0.5
    for t in np.arange(0.01, 1.0, 0.01):
        f1 = f1_score(y_val_sel, (y_val_proba >= t).astype(int))
        if f1 > best_f1:
            best_f1 = f1
            best_thresh = t

    resultats.append({
        "seuil_var": seuil,
        "n_features": len(selected_features),
        "best_threshold": best_thresh,
        "best_f1": best_f1,
        "features": selected_features
    })

# Sélection des meilleures features
results_df = pd.DataFrame(resultats)
best_row = results_df.sort_values(by="best_f1", ascending=False).iloc[0]

X_train_final = X.iloc[train_val_idx][best_row["features"]]
y_train_final = y.iloc[train_val_idx]

X_test = df_test.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X_test = X_test.loc[:, ~X_test.columns.duplicated()]
X_test_final = X_test[best_row["features"]]
y_test_final = df_test["SINISTRE_BINARY"]

final_pipe = Pipeline([
    ("smote", SMOTE(random_state=42)),
    ("under", RandomUnderSampler(random_state=42)),
    ("clf", CatBoostClassifier(verbose=0, random_state=42))
])

final_pipe.fit(X_train_final, y_train_final)
y_test_proba = final_pipe.predict_proba(X_test_final)[:, 1]
y_test_pred = (y_test_proba >= best_row["best_threshold"]).astype(int)

print("\n📊 Évaluation finale sur le TEST :")
print("Confusion matrix :")
print(confusion_matrix(y_test_final, y_test_pred))
print("\nClassification report :")
print(classification_report(y_test_final, y_test_pred, digits=4))
print(f"AUC : {roc_auc_score(y_test_final, y_test_proba):.4f}")
print(f"F1-score : {f1_score(y_test_final, y_test_pred):.4f}")


# optimisation du catboost


from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import make_scorer
from catboost import CatBoostClassifier

# Pipeline pour RandomizedSearchCV
opt_pipe = Pipeline([
    ("smote", SMOTE(random_state=42)),
    ("under", RandomUnderSampler(random_state=42)),
    ("clf", CatBoostClassifier(verbose=0, random_state=42))
])

# Grille d'hyperparamètres
param_grid = {
    "clf__iterations": [100, 200, 300],
    "clf__learning_rate": [0.01, 0.05, 0.1],
    "clf__depth": [4, 6, 8],
    "clf__l2_leaf_reg": [1, 3, 5, 7],
    "clf__border_count": [32, 64, 128]
}

# Optimisation 

search = RandomizedSearchCV(
    estimator=opt_pipe,
    param_distributions=param_grid,
    scoring=make_scorer(f1_score),
    n_iter=20,  # Ajuste selon les ressources
    cv=3,
    verbose=2,
    n_jobs=-1,
    random_state=42
)

search.fit(X_train_final, y_train_final)

# Meilleurs hyperparamètres
print("\n Meilleurs paramètres trouvés :")
print(search.best_params_)

# Évaluation
y_test_proba = search.predict_proba(X_test_final)[:, 1]
best_f1 = 0
best_thresh = 0.5
for t in np.arange(0.01, 1.0, 0.01):
    f1 = f1_score(y_test_final, (y_test_proba >= t).astype(int))
    if f1 > best_f1:
        best_f1 = f1
        best_thresh = t

print(f"\nSeuil optimal : {best_thresh:.2f} | F1-score : {best_f1:.4f}")
