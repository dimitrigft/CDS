import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, StratifiedGroupKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score, f1_score, confusion_matrix
from imblearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler

# 1. Données
df = df_all_trim_final.copy()
df["CONTRAT"] = df["CONTRAT"].astype(str)
df["SINISTRE_BINARY"] = df["SINISTRE"].astype(int)

# 2. Split stratifié par contrat
contracts_df = df.groupby("CONTRAT").agg({"SINISTRE_BINARY": "max"}).reset_index()
train_val_ids, test_ids = train_test_split(
    contracts_df["CONTRAT"], test_size=0.2,
    stratify=contracts_df["SINISTRE_BINARY"], random_state=42
)

df_train_val = df[df["CONTRAT"].isin(train_val_ids)].copy()
df_test = df[df["CONTRAT"].isin(test_ids)].copy()

# 3. Variables explicatives
X = df_train_val.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X = X.astype(np.float32)
y = df_train_val["SINISTRE_BINARY"].astype(np.int32)
groups = df_train_val["CONTRAT"]

# 4. StratifiedGroupKFold
sgkf = StratifiedGroupKFold(n_splits=4, shuffle=True, random_state=42)
folds = list(sgkf.split(X, y, groups))
train_val_idx = np.concatenate([val_idx for _, val_idx in folds[:3]])
val_idx = folds[3][1]

# 5. Sélection de variables
def select_top_features_by_importance(model, X, threshold=0.005):
    importances = model.feature_importances_
    return X.columns[importances > threshold].tolist()

seuils_importance = [0.0005, 0.001, 0.002, 0.005, 0.01]
resultats = []

for seuil in seuils_importance:
    X_train_fold = X.iloc[train_val_idx]
    y_train_fold = y.iloc[train_val_idx]
    X_val_fold = X.iloc[val_idx]
    y_val_fold = y.iloc[val_idx]

    base_model = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1)
    base_model.fit(X_train_fold, y_train_fold)

    selected = select_top_features_by_importance(base_model, X_train_fold, seuil)

    X_train_sel = X_train_fold[selected].values.astype(np.float32)
    y_train_sel = y_train_fold.values.astype(np.int32)
    X_val_sel = X_val_fold[selected].values.astype(np.float32)
    y_val_sel = y_val_fold.values.astype(np.int32)

    pipe = Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("under", RandomUnderSampler(random_state=42)),
        ("clf", RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1))
    ])
    pipe.fit(X_train_sel, y_train_sel)
    y_val_proba = pipe.predict_proba(X_val_sel)[:, 1]

    best_thresh = 0.5
    best_f1 = 0
    for t in np.arange(0.01, 1.0, 0.01):
        y_pred = (y_val_proba >= t).astype(int)
        f1 = f1_score(y_val_sel, y_pred)
        if f1 > best_f1:
            best_f1 = f1
            best_thresh = t

    resultats.append({
        "seuil_var": seuil,
        "nb_features": len(selected),
        "best_threshold": best_thresh,
        "best_f1": best_f1,
        "features": selected
    })

# 6. Résultat optimal
results_df = pd.DataFrame(resultats)
best_row = results_df.sort_values(by="best_f1", ascending=False).iloc[0]

# 7. Entraînement final
X_train_final = X.iloc[train_val_idx][best_row["features"]].values.astype(np.float32)
y_train_final = y.iloc[train_val_idx].values.astype(np.int32)

X_test = df_test.drop(columns=["SINISTRE", "SINISTRE_BINARY", "TRIM_YEAR", "CONTRAT", "INSEE_COM", "NOMBRE_SINISTRES"])
X_test_final = X_test[best_row["features"]].values.astype(np.float32)
y_test_final = df_test["SINISTRE_BINARY"].values.astype(np.int32)

final_pipe = Pipeline([
    ("smote", SMOTE(random_state=42)),
    ("under", RandomUnderSampler(random_state=42)),
    ("clf", RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42, n_jobs=-1))
])
final_pipe.fit(X_train_final, y_train_final)

# 8. Prédictions finales
y_test_proba = final_pipe.predict_proba(X_test_final)[:, 1]
y_test_pred = (y_test_proba >= best_row["best_threshold"]).astype(int)

# 9. Évaluation
print("\n Évaluation finale sur le TEST (Random Forest) :")
print("Confusion Matrix :")
print(confusion_matrix(y_test_final, y_test_pred))
print("\nClassification Report :")
print(classification_report(y_test_final, y_test_pred, digits=4))
print(f"AUC : {roc_auc_score(y_test_final, y_test_proba):.4f}")
print(f"F1-score : {f1_score(y_test_final, y_test_pred):.4f}")
