import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Récupérer le meilleur modèle
best_model = models[best_idx]  # le modèle du fold avec le meilleur F1-score

# Récupérer les importances
importances = best_model.feature_importances_
feature_names = X.columns

# Création d’un DataFrame trié
feat_imp_df = pd.DataFrame({
    "feature": feature_names,
    "importance": importances
}).sort_values(by="importance", ascending=False)

# Affichage top 20
plt.figure(figsize=(10, 6))
sns.barplot(data=feat_imp_df.head(20), x="importance", y="feature", palette="viridis")
plt.title("Top 20 des variables les plus importantes")
plt.tight_layout()
plt.show()

# Exemple : on garde les 25 variables les plus importantes
top_k = 25
top_features = feat_imp_df["feature"].head(top_k).tolist()

# Mise à jour des données
X_top = X[top_features]


results_val_top = []
models_top = []

for fold, (train_idx, val_idx) in enumerate(folds):
    X_train, X_val = X_top.iloc[train_idx], X_top.iloc[val_idx]
    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]

    model = RandomForestClassifier(
        n_estimators=100,
        max_depth=None,
        class_weight='balanced',
        random_state=42,
        n_jobs=-1
    )
    model.fit(X_train, y_train)

    y_pred = model.predict(X_val)
    y_proba = model.predict_proba(X_val)[:, 1]

    f1 = f1_score(y_val, y_pred)
    auc = roc_auc_score(y_val, y_proba)

    results_val_top.append({"fold": fold + 1, "f1": f1, "auc": auc})
    models_top.append(model)

# Évaluation finale sur test
best_idx_top = max(range(len(results_val_top)), key=lambda i: results_val_top[i]["f1"])
best_model_top = models_top[best_idx_top]

X_test_top = X_top.iloc[test_idx]  # test_idx vient de ton split
y_test_pred = best_model_top.predict(X_test_top)
y_test_proba = best_model_top.predict_proba(X_test_top)[:, 1]

print("➡️ Confusion Matrix (Test) avec variables sélectionnées :")
print(confusion_matrix(y_test, y_test_pred))
print("\n➡️ Classification Report (Test) :")
print(classification_report(y_test, y_test_pred, digits=4))
print(f"✅ AUC Test : {roc_auc_score(y_test, y_test_proba):.4f} | F1-score Test : {f1_score(y_test, y_test_pred):.4f}")
