from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, f1_score
import numpy as np

# --- Séparation des folds ---
trainval_folds = folds[:4]  # Folds 1 à 4 pour entraînement/validation
test_fold = folds[4]        # Fold 5 pour test final

# 🔁 Validation croisée interne
val_scores = []

for i, (train_idx, val_idx) in enumerate(trainval_folds):
    print(f"\n🔁 Fold {i+1} (Validation interne)")

    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]
    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]

    model = RandomForestClassifier(
        n_estimators=100,
        max_depth=None,
        class_weight='balanced',
        random_state=42,
        n_jobs=-1
    )
    model.fit(X_train, y_train)

    y_val_pred = model.predict(X_val)
    y_val_proba = model.predict_proba(X_val)[:, 1]

    f1 = f1_score(y_val, y_val_pred)
    auc = roc_auc_score(y_val, y_val_proba)

    print(f"  F1-score : {f1:.4f} | AUC : {auc:.4f}")
    val_scores.append((f1, auc))

# ✅ Entraînement final sur tous les folds 1–4 combinés
trainval_idx = np.concatenate([train_idx for train_idx, _ in trainval_folds])
X_trainval = X.iloc[trainval_idx]
y_trainval = y.iloc[trainval_idx]

model_final = RandomForestClassifier(
    n_estimators=100,
    max_depth=None,
    class_weight='balanced',
    random_state=42,
    n_jobs=-1
)
model_final.fit(X_trainval, y_trainval)

# 🧪 Test sur Fold 5
test_idx = test_fold[1]
X_test = X.iloc[test_idx]
y_test = y.iloc[test_idx]

y_test_pred = model_final.predict(X_test)
y_test_proba = model_final.predict_proba(X_test)[:, 1]

print("\n🧪 Évaluation finale sur test set (Fold 5) :")
print("➡️ Confusion Matrix :")
print(confusion_matrix(y_test, y_test_pred))
print("\n➡️ Classification Report :")
print(classification_report(y_test, y_test_pred, digits=4))
print(f"✅ Test AUC : {roc_auc_score(y_test, y_test_proba):.4f} | F1-score : {f1_score(y_test, y_test_pred):.4f}")
